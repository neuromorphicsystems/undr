



:py:mod:`undr.configuration`
============================

.. py:module:: undr.configuration

.. autoapi-nested-parse::
   User-facing API to manipulate configuration files and trigger actions (download, decompress...).




Overview
--------
Classes
~~~~~~~
.. list-table::
    :header-rows: 0
    :widths: auto
    :class: autoapi-summary

    * - :py:obj:`Configuration <undr.configuration.Configuration>`
      - Represents a dataset configuration (TOML).
    * - :py:obj:`DatasetSettings <undr.configuration.DatasetSettings>`
      - A dataset entry in a TOML settings file.
    * - :py:obj:`DoiSelector <undr.configuration.DoiSelector>`
      - Selector for a DOI download.
    * - :py:obj:`IndexStatus <undr.configuration.IndexStatus>`
      - Keeps track of the indexing progress for a dataset.
    * - :py:obj:`IndexesStatuses <undr.configuration.IndexesStatuses>`
      - Maps dataset names to index statuses.
    * - :py:obj:`InstallSelector <undr.configuration.InstallSelector>`
      - Selector for a standard installation, maps install modes to actions.
    * - :py:obj:`MapMessage <undr.configuration.MapMessage>`
      - A message generated by :py:class:`MapSelector`.
    * - :py:obj:`MapProcessFile <undr.configuration.MapProcessFile>`
      - Uses a switch to process files and wraps messages into :py:class:`MapMessage`.
    * - :py:obj:`MapSelector <undr.configuration.MapSelector>`
      - Applies a user-provided function to each file.


Functions
~~~~~~~~~
.. list-table::
    :header-rows: 0
    :widths: auto
    :class: autoapi-summary

    * - :py:obj:`configuration_from_path <undr.configuration.configuration_from_path>`
      - Reads the configuration (TOML) with the given path.


Attributes
~~~~~~~~~~
.. list-table::
    :header-rows: 0
    :widths: auto
    :class: autoapi-summary

    * - :py:obj:`schema <undr.configuration.schema>`
      - JSON schema for TOML settings files.


Module Contents
---------------

.. py:class:: Configuration


   Represents a dataset configuration (TOML).

   .. py:attribute:: directory
      :type: pathlib.Path

      Local path of the root datasets directory (usually called *datasets*).

   .. py:attribute:: name_to_dataset_settings
      :type: dict[str, DatasetSettings]

      Maps dataset names to their parameters.

   .. py:method:: bibtex(show_display: bool, workers: int, force: bool, bibtex_timeout: float, log_directory: Optional[pathlib.Path]) -> str

      Downloads index files and BibTeX references for enabled datasets.

      :param show_display: Whether to show progress in the terminal.
      :type show_display: bool
      :param workers: Number of parallel workers (threads).
      :type workers: int
      :param force: Whether to re-download resources even if they are already present locally.
      :type force: bool
      :param bibtex_timeout: Timeout for requests to https://dx.doi.org/.
      :type bibtex_timeout: float
      :param log_directory: Directory to store log files. Logs are not generated if this is None.
      :type log_directory: typing.Optional[pathlib.Path]

      :raises task.WorkerException: if a worker raises an error.

      :returns: BibTeX references as a string.
      :rtype: str


   .. py:method:: dataset(name: str) -> undr.path_directory.Directory

      Returns the dataset with the given name.

      :param name: The dataset name.
      :type name: str

      :raises ValueError: if the dataset exists but is disabled.

      :returns: The dataset's root directory.
      :rtype: path_directory.Directory


   .. py:method:: display(download_tag: undr.display.Tag = display.Tag(label='download', icon='↓'), process_tag: undr.display.Tag = display.Tag(label='process', icon='⚛')) -> undr.display.Display

      Returns a display that shows download and process progress for enabled datasets.

      :param download_tag: Label and icon for download. Defaults to display.Tag(label="download", icon="↓").
      :type download_tag: display.Tag, optional
      :param process_tag: Label and icon for process. Defaults to display.Tag(label="process", icon="⚛").
      :type process_tag: display.Tag, optional

      :returns: Controller for the display thread.
      :rtype: display.Display


   .. py:method:: enabled_datasets_settings() -> list[DatasetSettings]

      The settings of enabled datasets.

      The list always contains at least one item (the function otherwise raises an error).

      :raises RuntimeError: if all the datasets are disabled or there are no datasets.

      :returns: The settings of the datasets that are enabled, in the same order as the configuration file.
      :rtype: list[DatasetSettings]


   .. py:method:: indexes_statuses(selector: undr.json_index_tasks.Selector) -> IndexesStatuses

      Builds an indexing report for enabled datasets.

      :param selector: The selector used to index the dataset.
      :type selector: json_index_tasks.Selector

      :returns: Index status for enabled datasets, in the same order as the configuration file.
      :rtype: IndexesStatuses


   .. py:method:: install(show_display: bool, workers: int, force: bool, log_directory: Optional[pathlib.Path])

      Downloads index files and data files and decompresses data files.

      The action (index only, download, download and decompress) may be different for each dataset and is controlled by :py:class:`undr.install_mode.Mode`.

      :param show_display: Whether to show progress in the terminal.
      :type show_display: bool
      :param workers: Number of parallel workers (threads).
      :type workers: int
      :param force: Whether to re-download resources even if they are already present locally.
      :type force: bool
      :param log_directory: Directory to store log files. Logs are not generated if this is None.
      :type log_directory: typing.Optional[pathlib.Path]

      :raises task.WorkerException: if a worker raises an error.


   .. py:method:: iter(recursive: bool = False) -> Iterable[undr.path.Path]

      Iterates the files in the dataset.

      :param recursive: Whether to recursively search child directories. Defaults to False.
      :type recursive: bool, optional

      :returns: Iterator over the child paths. If `recursive` is false, the iterator yields the direct children (files and directories) of the root dataset directory. If `recursive` is true, the iterator yields all the children (files and directories) of the dataset.
      :rtype: typing.Iterable[path.Path]


   .. py:method:: map(switch: undr.formats.Switch, store: Optional[undr.persist.Store] = None, show_display: bool = True, workers: int = multiprocessing.cpu_count() * 2, log_directory: Optional[pathlib.Path] = None) -> Iterable[Any]

      Applies a function to eacch file in a dataset.

      :param switch: Specifies the action to perform on each file type.
      :type switch: formats.Switch
      :param store: Saves progress, makes it possible to resume interrupted processing. Defaults to None.
      :type store: typing.Optional[persist.Store], optional
      :param show_display: Whether to show progress in the terminal. Defaults to True.
      :type show_display: bool, optional
      :param workers: Number of parallel workers (threads). Defaults to twice :py:func:`multiprocessing.cpu_count`.
      :type workers: int, optional
      :param log_directory: Directory to store log files. Logs are not generated if this is None. Defaults to None.
      :type log_directory: typing.Optional[pathlib.Path], optional

      :raises task.WorkerException: if a worker raises an error.

      :returns: Iterator over the non-error messages generated by the workers.
      :rtype: typing.Iterable[typing.Any]


   .. py:method:: mktree(root: Union[str, os.PathLike], parents: bool = False, exist_ok: bool = False)

      Creates a copy of the datasets' file hierarchy without the index or data files.

      This function can be combined with :py:func:`map` to implement a map-reduce algorithm over entire datasets.
          a. Use ``mktree`` to create a empty copy of the file hierarchy.
          b. Use :py:meth:`Configuration.map` to create a result file in the new hierarchy for each data file in the originall hierarchy (for instance, a file that contains a measure algorithm's performance as a single number).
          c. Collect the results ("reduce") by reading the result files in the new hierarchy.

      This approach has several benefits. The most expensive step b. runs in parallell and can be interrupted and resumed. Result files are stored in a different directory and can easily be deleted without altering the original data. The new file hierarchy prevents name clashes as long as result files are named after data files, and workers do not need to worry about directory existence since ``mktree`` runs first.

      :param root: Directory where the new file hierarchy is created.
      :type root: typing.Union[str, os.PathLike]
      :param parents: Whether to create the parents of the new directory, if they do not exist. Defaults to False.
      :type parents: bool, optional
      :param exist_ok: Whether to silence exeptions if the root directory already exists. Defaults to False.
      :type exist_ok: bool, optional



.. py:class:: DatasetSettings


   A dataset entry in a TOML settings file.

   .. py:attribute:: mode
      :type: undr.install_mode.Mode

      The installation mode.

   .. py:attribute:: name
      :type: str

      The dataset's name, used to name the local directory.

   .. py:attribute:: timeout
      :type: Optional[float]

      Request timeout in seconds.

   .. py:attribute:: url
      :type: str

      The dataset's base URL.


.. py:class:: DoiSelector


   Bases: :py:obj:`undr.json_index_tasks.Selector`

   Selector for a DOI download.

   .. py:method:: action(file: undr.path.File) -> undr.json_index_tasks.Selector.Action

      Returns the action to apply to the given file.

      Called by :py:class:`Index`, :py:class:`InstallFilesRecursive` and :py:class:`ProcessFilesRecursive`.
      The default implementation returns `Selector.Action.PROCESS`.


   .. py:method:: scan_filesystem(directory: undr.path_directory.Directory)

      Whether to scan the filesystem.

      Called by :py:class:`Index` to decide whether it needs to scan the file system.
      This function may return False if :py:func:`action` returns one of the following for every file in the directory:

      - :py:attr:`Selector.Action.IGNORE`
      - :py:attr:`Selector.Action.DOI`
      - :py:attr:`Selector.Action.SKIP`
      - :py:attr:`Selector.Action.DOWNLOAD_SKIP`



.. py:class:: IndexStatus


   Keeps track of the indexing progress for a dataset.

   .. py:attribute:: current_index_files
      :type: int

      Number of index files parsed.

      The dataset has been indexed if :py:attr:`current_index_files` and :py:attr:`final_index_files` are equal.

   .. py:attribute:: dataset_settings
      :type: DatasetSettings

      User-specified dataset settings.

   .. py:attribute:: downloaded_and_processed
      :type: bool

      Whether the dataset has been fully downloaded and processed.

   .. py:attribute:: final_index_files
      :type: int

      Total number of index files.

   .. py:attribute:: selector
      :type: undr.json_index_tasks.Selector

      Selector to choose actions while indexing.

   .. py:attribute:: server
      :type: undr.remote.Server

      The remote server for this dataset.

   .. py:method:: push(message: Any) -> tuple[bool, Optional[IndexStatus]]

      Updates the status based on the message.

      Ignores messages that are not :py:class:`undr.json_index_tasks.IndexLoaded` or :py:class:`undr.json_index_tasks.DirectoryScanned`.

      :returns: Whether the dataset has been fully indexed and self, if self was updated.
      :rtype: tuple[bool, typing.Optional["IndexStatus"]]



.. py:class:: IndexesStatuses


   Maps dataset names to index statuses.

   .. py:attribute:: name_to_status
      :type: dict[str, IndexStatus]

      Inner dict.

   .. py:method:: push(message: Any) -> tuple[bool, Optional[IndexStatus]]

      Processes relevant messages.

      This function updates the indexing status and returns it
      if message is a :py:class:`undr.json_index_tasks.IndexLoaded` or :py:class:`undr.json_index_tasks.DirectoryScanned` object.
      If the message was the last indexing message for this dataset, the first argument is True.



.. py:class:: InstallSelector(mode: undr.install_mode.Mode)


   Bases: :py:obj:`undr.json_index_tasks.Selector`

   Selector for a standard installation, maps install modes to actions.

   :raises ValueError: if mode is not :py:attr:`undr.install_mode.Mode.REMOTE`, :py:attr:`undr.install_mode.Mode.LOCAL`, or :py:attr:`undr.install_mode.Mode.RAW`.

   .. py:method:: action(file: undr.path.File) -> undr.json_index_tasks.Selector.Action

      Returns the action to apply to the given file.

      Called by :py:class:`Index`, :py:class:`InstallFilesRecursive` and :py:class:`ProcessFilesRecursive`.
      The default implementation returns `Selector.Action.PROCESS`.


   .. py:method:: scan_filesystem(directory: undr.path_directory.Directory)

      Whether to scan the filesystem.

      Called by :py:class:`Index` to decide whether it needs to scan the file system.
      This function may return False if :py:func:`action` returns one of the following for every file in the directory:

      - :py:attr:`Selector.Action.IGNORE`
      - :py:attr:`Selector.Action.DOI`
      - :py:attr:`Selector.Action.SKIP`
      - :py:attr:`Selector.Action.DOWNLOAD_SKIP`



.. py:class:: MapMessage


   A message generated by :py:class:`MapSelector`.

   .. py:attribute:: payload
      :type: Any

      Payload attached to this message.

      The payload may be any object type. The user is reponsible for checking message types.


.. py:class:: MapProcessFile(file: undr.path.File, switch: undr.formats.Switch)


   Bases: :py:obj:`undr.json_index_tasks.ProcessFile`

   Uses a switch to process files and wraps messages into :py:class:`MapMessage`.

   :param file: The file to process.
   :type file: path.File
   :param switch: Switch that maps file types to actions.
   :type switch: formats.Switch

   .. py:method:: run(session: requests.Session, manager: undr.task.Manager)



.. py:class:: MapSelector(enabled_types: set[Any], store: Optional[undr.persist.ReadOnlyStore])


   Bases: :py:obj:`undr.json_index_tasks.Selector`

   Applies a user-provided function to each file.

   :param enabled_types: The file types (a class in :py:mod:`undr.formats`) to process.
   :type enabled_types: set[typing.Any]
   :param store: A store to check for readily processed files.
   :type store: typing.Optional[persist.ReadOnlyStore]

   .. py:method:: action(file: undr.path.File)

      Returns the action to apply to the given file.

      Called by :py:class:`Index`, :py:class:`InstallFilesRecursive` and :py:class:`ProcessFilesRecursive`.
      The default implementation returns `Selector.Action.PROCESS`.


   .. py:method:: scan_filesystem(directory: undr.path_directory.Directory)

      Whether to scan the filesystem.

      Called by :py:class:`Index` to decide whether it needs to scan the file system.
      This function may return False if :py:func:`action` returns one of the following for every file in the directory:

      - :py:attr:`Selector.Action.IGNORE`
      - :py:attr:`Selector.Action.DOI`
      - :py:attr:`Selector.Action.SKIP`
      - :py:attr:`Selector.Action.DOWNLOAD_SKIP`



.. py:function:: configuration_from_path(path: Union[str, os.PathLike]) -> Configuration

   Reads the configuration (TOML) with the given path.

   :param path: Configuration file path.
   :type path: typing.Union[str, os.PathLike]

   :raises RuntimeError: if two datasets have the same name in the configuration.

   :returns: the parsed TOML configuration.
   :rtype: Configuration


.. py:data:: schema

   JSON schema for TOML settings files.

