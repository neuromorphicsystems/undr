



:py:mod:`undr.formats`
======================

.. py:module:: undr.formats

.. autoapi-nested-parse::
   File formats supported by UNDR.

   File types that are not listed here can still be included, downloaded, decompressed, and checked with UNDR. However, they are listed as "other files" and UNDR does not attempt to parse or load them.

   To add a new file format, create and implement a derived class of :py:class:`undr.path.File` (see for instance :py:class:`ApsFile`) and add it to :py:func:`file_from_dict` and :py:class:`Switch`.




Overview
--------
Classes
~~~~~~~
.. list-table::
    :header-rows: 0
    :widths: auto
    :class: autoapi-summary

    * - :py:obj:`ApsFile <undr.formats.ApsFile>`
      - A file that contains luminance (grey levels) frames.
    * - :py:obj:`DvsFile <undr.formats.DvsFile>`
      - A file that contains DVS (polarity) events.
    * - :py:obj:`ImuFile <undr.formats.ImuFile>`
      - A file that contains IMU events.
    * - :py:obj:`Switch <undr.formats.Switch>`
      - Calls specialized file handlers while iterating a dataset.


Functions
~~~~~~~~~
.. list-table::
    :header-rows: 0
    :widths: auto
    :class: autoapi-summary

    * - :py:obj:`file_from_dict <undr.formats.file_from_dict>`
      - Creates a file object from a dictionary, typically loaded from an index file.


Attributes
~~~~~~~~~~
.. list-table::
    :header-rows: 0
    :widths: auto
    :class: autoapi-summary

    * - :py:obj:`SendMessage <undr.formats.SendMessage>`
      - Callback channel for messages generated by a file handler during data iteration.


Module Contents
---------------

.. py:class:: ApsFile


   Bases: :py:obj:`undr.path.File`

   A file that contains luminance (grey levels) frames.

   Active-pixel sensors (APS) describe, strictly speaking, any sensor with pixels that use MOSFET amplifiers.
   However, the term is commonly used to refer to the integrating pixels found in non-CCD conventional cameras.
   In the context of Neuromorphic Engineering, APS is used to describe DAVIS frames.

   .. py:attribute:: height
      :type: int

      Frame height (y direction) in pixels.

   .. py:attribute:: width
      :type: int

      Frame width (x direction) in pixels.

   .. py:method:: packets() -> Iterable[numpy.ndarray]

      Iterates over the file data.

      This function streams the file from the remote server if it is not available locally, and decompresses the file in memory if it is locally available but compressed.

      :returns: Iterator over the file's data converted into numpy arrays with dtype :py:func:`undr.raw.aps_dtype`.
      :rtype: typing.Iterable[numpy.ndarray]


   .. py:method:: word_size() -> int

      The size of an entry in this file, in bytes.

      This can be used to ensure that entries (events, frames...) are not split while reading.
      A decoded file's size in bytes must be a multiple of the value returned by this function.

      :returns: Number of bytes used by each entry.
      :rtype: int



.. py:class:: DvsFile


   Bases: :py:obj:`undr.path.File`

   A file that contains DVS (polarity) events.

   Dynamic Vision Sensor events, often called polarity events,
   contain a timestamp, pixel coordinates, and a polarity (ON or OFF)
   that indicates whether luminance increased or decreased.

   .. py:attribute:: height
      :type: int

      Frame height (y direction) in pixels.

   .. py:attribute:: width
      :type: int

      Frame width (x direction) in pixels.

   .. py:method:: packets() -> Iterable[numpy.ndarray]

      Iterates over the file data.

      This function streams the file from the remote server if it is not available locally, and decompresses the file in memory if it is locally available but compressed.

      :returns: Iterator over the file's data converted into numpy arrays with dtype :py:attr:`undr.raw.DVS_DTYPE`.
      :rtype: typing.Iterable[numpy.ndarray]


   .. py:method:: word_size()

      The size of an entry in this file, in bytes.

      This can be used to ensure that entries (events, frames...) are not split while reading.
      A decoded file's size in bytes must be a multiple of the value returned by this function.

      :returns: Number of bytes used by each entry.
      :rtype: int



.. py:class:: ImuFile


   Bases: :py:obj:`undr.path.File`

   A file that contains IMU events.

   Inertial Measurement Unit (IMU) events are produced by an accelerometer / gyroscope / magnetometer.

   .. py:method:: packets() -> Iterable[numpy.ndarray]

      Iterates over the file data.

      This function streams the file from the remote server if it is not available locally, and decompresses the file in memory if it is locally available but compressed.

      :returns: Iterator over the file's data converted into numpy arrays with dtype :py:attr:`undr.raw.IMU_DTYPE`.
      :rtype: typing.Iterable[numpy.ndarray]


   .. py:method:: word_size()

      The size of an entry in this file, in bytes.

      This can be used to ensure that entries (events, frames...) are not split while reading.
      A decoded file's size in bytes must be a multiple of the value returned by this function.

      :returns: Number of bytes used by each entry.
      :rtype: int



.. py:data:: SendMessage

   Callback channel for messages generated by a file handler during data iteration.

.. py:class:: Switch


   Calls specialized file handlers while iterating a dataset.

   If a handler is None, the corresponding files are ignored by the iterator.

   :param handle_aps: Handler for APS files.
   :type handle_aps: typing.Optional[typing.Callable[[ApsFile, SendMessage], None]]
   :param handle_dvs: Handler for DVS files.
   :type handle_dvs: typing.Optional[typing.Callable[[DvsFile, SendMessage], None]]
   :param handle_imu: Handler for IMU files.
   :type handle_imu: typing.Optional[typing.Callable[[ImuFile, SendMessage], None]]
   :param handle_other: Handler for other files.
   :type handle_other: typing.Optional[typing.Callable[[path.File, SendMessage], None]]

   .. py:attribute:: handle_aps
      :type: Optional[Callable[[ApsFile, SendMessage], None]]

      

   .. py:attribute:: handle_dvs
      :type: Optional[Callable[[DvsFile, SendMessage], None]]

      

   .. py:attribute:: handle_imu
      :type: Optional[Callable[[ImuFile, SendMessage], None]]

      

   .. py:attribute:: handle_other
      :type: Optional[Callable[[undr.path.File, SendMessage], None]]

      

   .. py:method:: enabled_types() -> set[Any]

      Lists the file types that have a non-None handler.

      :returns: The set of file classes that will be handled.
      :rtype: set[typing.Any]


   .. py:method:: handle_file(file: undr.path.File, send_message: SendMessage)

      Calls the specialized file handler for the file, if the handler is non-None.

      :param file: The file to process.
      :type file: path.File
      :param send_message: Callback channel for messages.
      :type send_message: SendMessage

      :raises RuntimeError: if the file type is not supported by this function.



.. py:function:: file_from_dict(data: dict[str, Any], parent: undr.path_directory.Directory) -> undr.path.File

   Creates a file object from a dictionary, typically loaded from an index file.

   :param data: Dictionary describing the file and its properties.
   :type data: dict[str, typing.Any]
   :param parent: Parent directory of the file, used to generate the file system path.
   :type parent: path_directory.Directory

   :raises RuntimeError: if the file type is not supported by this function.

   :returns: A specialized file object.
   :rtype: path.File


